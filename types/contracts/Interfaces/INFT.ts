/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace INFT {
  export type PollutantStruct = {
    name: PromiseOrValue<string>;
    intialAmounts: PromiseOrValue<BigNumberish>[];
    targetAmounts: PromiseOrValue<BigNumberish>[];
  };

  export type PollutantStructOutput = [string, BigNumber[], BigNumber[]] & {
    name: string;
    intialAmounts: BigNumber[];
    targetAmounts: BigNumber[];
  };
}

export interface INFTInterface extends utils.Interface {
  functions: {
    "mintNewProject(address,uint256,bytes,(string,uint256[],uint256[])[])": FunctionFragment;
    "mintProjects(uint256,uint256,address,uint256,bytes,(string,uint256[],uint256[])[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "mintNewProject" | "mintProjects"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "mintNewProject",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      INFT.PollutantStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintProjects",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      INFT.PollutantStruct[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "mintNewProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintProjects",
    data: BytesLike
  ): Result;

  events: {};
}

export interface INFT extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: INFTInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    mintNewProject(
      account: PromiseOrValue<string>,
      nftID: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      pollutantDetails: INFT.PollutantStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintProjects(
      prevNFTID: PromiseOrValue<BigNumberish>,
      newnNFTID: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      pollutantDetails: INFT.PollutantStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  mintNewProject(
    account: PromiseOrValue<string>,
    nftID: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    pollutantDetails: INFT.PollutantStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintProjects(
    prevNFTID: PromiseOrValue<BigNumberish>,
    newnNFTID: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    pollutantDetails: INFT.PollutantStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    mintNewProject(
      account: PromiseOrValue<string>,
      nftID: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      pollutantDetails: INFT.PollutantStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    mintProjects(
      prevNFTID: PromiseOrValue<BigNumberish>,
      newnNFTID: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      pollutantDetails: INFT.PollutantStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    mintNewProject(
      account: PromiseOrValue<string>,
      nftID: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      pollutantDetails: INFT.PollutantStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintProjects(
      prevNFTID: PromiseOrValue<BigNumberish>,
      newnNFTID: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      pollutantDetails: INFT.PollutantStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    mintNewProject(
      account: PromiseOrValue<string>,
      nftID: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      pollutantDetails: INFT.PollutantStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintProjects(
      prevNFTID: PromiseOrValue<BigNumberish>,
      newnNFTID: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      pollutantDetails: INFT.PollutantStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
